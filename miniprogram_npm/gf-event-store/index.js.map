{"version":3,"sources":["index.js","event-bus.js","event-store.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = {\r\n  GFEventBus: require(\"./event-bus\"),\r\n  GFEventStore: require(\"./event-store\"),\r\n};\r\n","class GFEventBus {\r\n  constructor() {\r\n    this.eventBus = {};\r\n  }\r\n  on(eventName, eventCallback, thisArgument) {\r\n    if (typeof eventName !== \"string\" || !eventName) {\r\n      throw new TypeError(\r\n        \"the event name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the eventCallbackFnction must be function type\");\r\n    }\r\n\r\n    let handlers = this.eventBus[eventName];\r\n    if (!handlers) {\r\n      handlers = [];\r\n      this.eventBus[eventName] = handlers;\r\n    }\r\n    handlers.push({\r\n      eventCallback,\r\n      thisArgument,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  once(eventName, eventCallback, thisArgument) {\r\n    if (typeof eventName !== \"string\" || !eventName) {\r\n      throw new TypeError(\r\n        \"the event name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the eventCallbackFnction must be function type\");\r\n    }\r\n\r\n    const onceCallback = (...payload) => {\r\n      this.off(eventName, onceCallback);\r\n      eventCallback.apply(thisArgument, payload);\r\n    };\r\n    return this.on(eventName, onceCallback, thisArgument);\r\n  }\r\n\r\n  emit(eventName, ...payload) {\r\n    if (typeof eventName !== \"string\" || !eventName) {\r\n      throw new TypeError(\r\n        \"the event name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n\r\n    let handlers = this.eventBus[eventName] || [];\r\n    handlers.forEach((handler) => {\r\n      handler.eventCallback.apply(handler.thisArgument, payload);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  off(eventName, eventCallback) {\r\n    if (typeof eventName !== \"string\" || !eventName) {\r\n      throw new TypeError(\r\n        \"the event name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n    if (typeof eventCallback !== \"function\") {\r\n      throw new TypeError(\"the eventCallbackFnction must be function type\");\r\n    }\r\n    let handlers = this.eventBus[eventName];\r\n    if (handlers && eventCallback) {\r\n      let newhandlers = [...handlers];\r\n      for (let i = 0; i < newhandlers.length; i++) {\r\n        const handler = newhandlers[i];\r\n        if (handler.eventCallback === eventCallback) {\r\n          let index = newhandlers.indexOf(handler);\r\n          handlers.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (handlers.length === 0) {\r\n      delete this.eventBus[eventName];\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nmodule.exports = GFEventBus;\r\n","const GFEventBus = require(\"./event-bus\");\r\nconst { isObject } = require(\"./utils\");\r\n\r\nclass GFEventStore {\r\n  constructor(store) {\r\n    if (!isObject(store.state)) {\r\n      throw new Error(\"the state must be object type\");\r\n    }\r\n    if (store.actions && isObject(store.actions)) {\r\n      const values = Object.values(store.actions);\r\n      for (const value of values) {\r\n        if (typeof value !== \"function\") {\r\n          throw new Error(\"the value of actions must be function type\");\r\n        }\r\n      }\r\n      this.actions = store.actions;\r\n    }\r\n    this.state = store.state;\r\n    this._observe(store.state);\r\n    this.EventBus = new GFEventBus(); //监听多个事件\r\n    this.EventBus2 = new GFEventBus(); //监听单个事件\r\n  }\r\n\r\n  _observe(state) {\r\n    const _this = this;\r\n    Object.keys(state).forEach((key) => {\r\n      let _value = state[key];\r\n      Object.defineProperty(state, key, {\r\n        get: function () {\r\n          return _value;\r\n        },\r\n        set: function (newValue) {\r\n          if (_value === newValue) return;\r\n          _value = newValue;\r\n          _this.EventBus.emit(key, _value);\r\n          _this.EventBus2.emit(key, { [key]: _value }); //\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  onState(stateKey, stateCallback) {\r\n    if (typeof stateKey !== \"string\" || !stateKey) {\r\n      throw new TypeError(\r\n        \"the action name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n    const keys = Object.keys(this.state);\r\n    if (keys.indexOf(stateKey) === -1) {\r\n      throw new Error(\"stateKey is not found in state\");\r\n    }\r\n    if (typeof stateCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\");\r\n    }\r\n    this.EventBus.on(stateKey, stateCallback);\r\n    const value = this.state[stateKey];\r\n    stateCallback.apply(this.state, [value]);\r\n  }\r\n\r\n  onStates(stateKeys, stateCallback) {\r\n    if (!(stateKeys instanceof Array)) {\r\n      throw new TypeError(\"the stateKeys must be array type\");\r\n    }\r\n    if (typeof stateCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\");\r\n    }\r\n    const keys = Object.keys(this.state);\r\n    const value = {};\r\n    for (const stateKey of stateKeys) {\r\n      if (keys.indexOf(stateKey) === -1) {\r\n        throw new Error(\"stateKey is not found in state\");\r\n      }\r\n      this.EventBus2.on(stateKey, stateCallback);\r\n      value[stateKey] = this.state[stateKey];\r\n    }\r\n    stateCallback.apply(this.state, [value]);\r\n  }\r\n\r\n  offState(stateKey, stateCallback) {\r\n    if (typeof stateKey !== \"string\" || !stateKey) {\r\n      throw new TypeError(\r\n        \"the action name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n    const keys = Object.keys(this.state);\r\n    if (keys.indexOf(stateKey) === -1) {\r\n      throw new Error(\"stateKey is not found in state\");\r\n    }\r\n    if (typeof stateCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\");\r\n    }\r\n    this.EventBus.off(stateKey, stateCallback);\r\n  }\r\n\r\n  offStates(stateKeys, stateCallback) {\r\n    if (!(stateKeys instanceof Array)) {\r\n      throw new TypeError(\"the stateKeys must be array type\");\r\n    }\r\n    if (typeof stateCallback !== \"function\") {\r\n      throw new TypeError(\"the event callback must be function type\");\r\n    }\r\n    const keys = Object.keys(this.state);\r\n    for (const stateKey of stateKeys) {\r\n      if (keys.indexOf(stateKey) === -1) {\r\n        throw new Error(\"stateKey is not found in state\");\r\n      }\r\n      this.EventBus2.off(stateKey, stateCallback);\r\n    }\r\n  }\r\n\r\n  setState(stateKey, stateValue) {\r\n    const keys = Object.keys(this.state);\r\n    if (keys.indexOf(stateKey) === -1) {\r\n      throw new Error(\"stateKey is not found in state\");\r\n    }\r\n    this.state.stateKey = stateValue;\r\n  }\r\n\r\n  dispatch(actionName, ...args) {\r\n    if (typeof actionName !== \"string\" || !actionName) {\r\n      throw new TypeError(\r\n        \"the action name must be string type and event name not be null string\"\r\n      );\r\n    }\r\n    const names = Object.keys(this.actions);\r\n    if (names.indexOf(actionName) === -1) {\r\n      throw new Error(\"actionName is not found in actions\");\r\n    }\r\n    const actionFn = this.actions[actionName];\r\n    actionFn.apply(this, [this.state, ...args]);\r\n  }\r\n}\r\n\r\nmodule.exports = GFEventStore;\r\n","function isObject(obj) {\r\n  var type = typeof obj;\r\n  return type === \"object\" && !!obj;\r\n}\r\n\r\nmodule.exports = {\r\n  isObject,\r\n};\r\n"]}